REM Single cylinder version
REM 2.0982 Added ErrMsg=0 to #AUTO
REM 2.0986 IF in low flow #ADJSPA is skipped during refill
REM 2.212 - Trying to match code up to dual cylinder version.

#AUTO
TLA=9.5;TKA=9.8;TM 1000
Rev=2.212;Version=3.0;CylNum=1;Frstim=0
RampA=0;StT2A=0;OvrPresA=0;RstPosA=0;
MO;CE 2,2;CN -1;MT 1,1;KPvel=4;KDvel=30;KIvel=0;FlowRA=0;FloVolA=0
KP 12;KD 30;KI 0;OverLim=0;ZC 0;CONTA=0
PmodeA=0;DecrK=1;Occur=0;Tchng=0;PSetPt=0;DelaydA=0
AC 10000000;DC 2048000;AG 1;SP 1000000
SH;FState=0;Pmode=0;JogDir=0;ChngDir=0;JogDirL=0;OutLmtA=0;
PState=0;XdcrCur=1;jststrd=1;Fjststrd=1;Pready=0;ReqStp=0;StCylA=0
StReflA=0;TlastA=TIME;ErrMsg=0
InitDone=0;CyclDone=0;Transit=0;PTempA=0;NewErr=0;ResetMLA=0;Cycle=0
SPlow=0;SPhigh=0;FracLo=0;FracHi=0;LowFlow=0;CompErr=0;Finding=0
ReStpP=0;RateChng=0;PowerUp=1;Local=0;Remote=0
DM AveSpAr[10];AveSpTm=TIME;Speedi=0;Debug=0
WT10000;JS#STRTDAQ;JS#ZEROOF
EN

#SPEED
REM Shift array elements
  AveSpAr[9]=AveSpAr[8]
  AveSpAr[8]=AveSpAr[7]
  AveSpAr[7]=AveSpAr[6]
  AveSpAr[6]=AveSpAr[5]
  AveSpAr[5]=AveSpAr[4]
  AveSpAr[4]=AveSpAr[3]
  AveSpAr[3]=AveSpAr[2]
  AveSpAr[2]=AveSpAr[1]
  AveSpAr[1]=AveSpAr[0]
IF Aflow>0;AveSpAr[0]=SPcurA;Speedi=Speedi+1;ENDIF
IF (Aflow=0);AveSp=0;ENDIF
IF Speedi>3;JS#SPEED2;ENDIF
EN

#SPEED2
Speedi=0
TempSpTo=(AveSpAr[0]+AveSpAr[1]+AveSpAr[2]+AveSpAr[3]+AveSpAr[4]+AveSpAr[5])
AveSp=((TempSpTo+AveSpAr[6]+AveSpAr[7]+AveSpAr[8]+AveSpAr[9])/10)
EN

#ADJSPA
JP#ADJSPA, StReflA=1
SP SPhigh
WT FracLo
SP SPlow
WT FracHi
JP#ADJSPA
EN

#CHKLMTA
WT 25
JP#CHKLMTA,(MLcurA>Amin)&(MLcurA<Amax)
IF (MLcurA<=Amin)
  StartMLA=PmpStart
ELSE
  StartMLA=RcvStart
ENDIF
JP#REFILLA
EN

#CHKMLA
#LOOP1
WT 25
JP#STPBOTH,MLtot>=TarVol
JS#CHGRATE,RateChng>0
JP#LOOP1,MLcurA>TrnsVol
JP#REFILLA
EN;EN

#CHGRATE
RateChng=0
#LOOPCHG
JP#LOOPCHG,(StReflA=1)
JS#VCALCSA
PmpSpdA=(PmpRate*CntsPMLA)/60
JG PmpSpdA
IF LowFlow=1;HX5;JS#LOSPPA;XQ#ADJSPA,5;ENDIF
EN;EN

#CMDERR
ZC0;ST;AM;MO;LineNum=_ED;ErrCode=_TC;NewErr=1;ErrMsg=100+ErrCode;HX
Errline=_ED
RE

#CURPA
AccumA=0;IncA=0
#REPEATA;AccumA=AccumA+_ZTA;IncA=IncA+1;WT tdla
JP#REPEATA,IncA<AveNo
ZTAave=(AccumA/IncA)
IF AccumA=0;ZerOffA=0;ELSE;ZerOffA=PzerCntA;ENDIF
PcurA=((AccumA/IncA)-ZerOffA)/CntpPsiA
IF PcurA>PMax;OvrPresA=OvrPresA+1
  IF OvrPresA>2
    IF PcurA>(1.1*PRange[Pxdcr])
      IF DontOpn=0;JS#OpnAll;ENDIF
      'SP 0,0;'STA;'STB;'ZCA=0;'ZCB=0;'HX;'EN
      JS#ESTOP
    ENDIF
    ErrMsg=12;NewErr=1;Errline=_ED
    IF PState>0
      ReStpP=1
    ELSE
'      JS#STPBOTH
      JS#ESTOP
    ENDIF
  ENDIF
ELSE
  OvrPresA=0
ENDIF
EN;EN

#CURMLA
MLcurA=_TPA/CntsPMLA;TcurA=TIME;CurCntsA=_TPA
REM In rare cases this loop runs with 0 time between.
REM Add if statement to avoid div by zero
IF TcurA-TlastA<>0;SPcurA=((LstCntsA-CurCntsA)/(TcurA-TlastA))/SpdFacA;ENDIF
LstCntsA=CurCntsA;TlastA=TcurA;
IF ((FState<>3)&(PState<>3))
IF Aflow= 1;MLDispA=MLzeroA-MLcurA;ENDIF
MLtot=MLDispA+MLtotA+-MLofstA
ENDIF
EN

#CYCLEA
JS#OpnAin;JS#ClsAout
MLtotA=0;MLDispA=0;MLofstA=0;OEA=1
JP#SKIPF2,_LFA=0
JG JgSpd;BGA;AMA
#SKIPF2
IF InVopn=0;JS#ClsAin;JS#OpnAout;ENDIF
MLnewA=StartMLA;Rate=InitRate
JS#NEWPOSA
AM A;AStopd=0;StReflA=0;OEA=0
EN;EN

#CYCTOST
TLA=3.5;TKA=3.8
Cycle=1;AStopd=1
XQ#CYCLEA,2
#CTSLOOP
JP#CTSLOOP,(AStopd>0)
JS#ClsAll
Cycle=0;CyclDone=1
#ZEROT
WT 1000
MLcurA=_TPA/CntsPMLA;MLzeroA=MLcurA;MLofstA=0;MLtotA=0;MLDispA=0
TLA=9.5;TKA=9.8
EN;EN;EN

#DAQLOOP
JS#CURMLA
JS#SPEED
'JS#CURPA
IF XdcrCur=1;Pcur=PcurA;ENDIF
IF XdcrCur=0;Pcur=0;ENDIF
WT 200
JP#DAQLOOP,DAQmode>0
EN

#PDAQ
JS#CURPA
WT 200
JP#PDAQ,DAQmode>0
EN

#ESTOP
STA;FState=0;HX2;HX5
AM;ZCA=0;PState=0;
FlowingA=0
StReflA=0
IF _XQ1>0;HX1;ENDIF
EN

#FLOWA
FlowingA=1
REM Calculate Speed
SPA=(FlowRA*CntsPMLA)/60
REM Calculate Volume
PR FloVolA*CntsPMLA
BGA;AMA;FlowingA=0
EN

#FNDLMTS
TLA=2.5;TKA=2.8
JS#ZEROOF
Finding=1.0;AStopd=1;CyclDone=0;InitDone=0
XQ#FNDA,2
#FLLOOP
JP#FLLOOP,(AStopd)
Finding=0;FState=0;PowerUp=0;InitDone=1
JS#ClsAll
TLA=9.5;TKA=9.8
EN;EN

#FNDA
JS#OpnAin;JS#ClsAout
SHA;DC 2048000;OEA=1
JP#SKIPFA,_LFA=0
JG JgSpd;BGA;AM A
#SKIPFA
IF InVopn=0;JS#ClsAin;JS#OpnAout;ENDIF
FLCntsA = _TPA - CntMarg
JG -JgSpd;BGA;AM A
RLCntsA=_TPA + CntMarg
DeltCtsA=FLCntsA-RLCntsA
StkeA=DeltCtsA/CntsPmm
VolA=DeltCtsA/CntsPMLA
PR CntMarg;BGA;AM A
DP 0;AStopd=0
MLtotA=0;MLDispA=0;MLofstA=0;OEA=0
EN;EN

#LIMSWI
IF (Finding=1)|(Cycle=1)
  IF (_LFA=0)|(_LRA=0);STA;ENDIF
ELSE
  IF (_LFA=0)|(_LRA=0);DC 100000000;STA;AMA;DC 2048000;ENDIF
ENDIF
RE

#LOSPPA
SPlow=_SPA;SPhigh=SPlow+2;FracLo=(@ABS[PmpSpdA]-_SPA)*1000;FracHi=2000-FracLo
EN

#MASTPLP
JS#NEWSP,Ramping=1
IF (ReStpP=1)
  IF PmodeA>0  
    JS#SETPFBA
    SHA;HX2;HX3;HX7;StCylB=0
  ENDIF
  Pmode=PmodeA
  IF (PState<>3) 
      PState=0
  ENDIF
  Pready=0
ENDIF
WT 200
JP#MASTPLP,PState>0
ReStpP=0
IF _ZCA >0
  JS#SETPFBA
  HX3;SHA
ENDIF
JS#ZEROOF
EN

#MLSCALA
MLPmmA=(3.14159*RodDia[RodSize]*RodDia[RodSize])/4000
#CALCNTA
StkML=TotStke*MLPmmA
CntsPMLA=CntsPmm/MLPmmA
REM Dumbed down math for galil
SpdFacA=(@RND[(CntsPMLA/10)]/6144)
CntMarg = Margin*CntsPmm
IF Burn>0;Burn=0;BV;ENDIF
EN;EN

#NEWPOSA
TarPosA=MLnewA*CntsPMLA
SP (Rate*CntsPMLA)/60
PA TarPosA;BGA;AM A
JS#CURMLA
FState=0
EN

#NEWSP
IF TarPres<PSetPt
  RampRate=-RampRate
ENDIF
Pinc=RampRate/10
IF Pinc=0
  Ramping=0
ENDIF
AT 0
#RAMP
AT-100
PSetPt=PSetPt + Pinc
IF Pinc>0
  IF PSetPt>=TarPres
    PSetPt=TarPres
    Ramping=0
  ENDIF
ELSE
  IF PSetPt<TarPres
    PSetPt=TarPres
    Ramping=0
  ENDIF
ENDIF
JS#SETZR
JP#RAMP,Ramping>0
EN;EN

#PCNTRLA
JS#ClsAin
XdcrCur=1;PState=1;StCylA=3
JS#SETZR
JS#SETFFBA
JS#OpnAout
Pready=1
EN

#POSERR
NewErr=1;ErrMsg=11;ST;AM;MO;SH;ZS;HX
RE

#REFILLA
StReflA=1;StCylA=1
IF PState>0
	JS#SETPST
ELSE
  FState=3
ENDIF
IF _ZCA>0
  JS#SETPFBA
ENDIF
STA;AMA
JS#ClsAout
WT 1000
JS#OpnAin
MLtotA=MLtotA+MLDispA;MLDispA=0;Transit=0
SP RevSpdA;TarPosA =StartMLA*CntsPMLA
PA TarPosA;BGA;AMA
JS#ClsAin;MLcurA=_TPA/CntsPMLA;MLzeroA=MLcurA
REM Stop here if called by STRTPRS
IF CONTA=1
	CONTA=0;StReflA=0;FState=0
ELSE
REM We need to stop pressure loop after this refill
	IF CompErr=1
		ReStpP=1
	ENDIF 
REM we will not continue
	IF (ReStpP=1) | (ReqStp=1)
		StReflA=0;Fjststrd=0;FState=0;PState=0;StCylA=0
	ELSE
		IF PState>0
			StReflA=0
			JP#SYNCA
		ELSE
			FState=1
			IF (ReqStp=0)
				StReflA=0
				JP#STARTA
			ELSE
				StReflA=0
				Fjststrd=0
			ENDIF
		ENDIF
	ENDIF
ENDIF
EN

#RCYCA
Cycle=1
JP#SKPRA,_LRA=0
JG -JgSpCal;BGA;AM A
#SKPRA
MLnewA=CalStrtA;Rate=RateCal
JS#NEWPOSA
AM A
WT 1000
MLcurA=_TPA/CntsPMLA;MLzeroA=MLcurA;MLofstA=0;MLtotA=0
Cycle=0
EN

#RESET
RstPosA=ResetMLA*CntsPMLA
DP RstPosA
EN
#SAVEML
MLaccum=MLaccum+DeltaML;BV;EN
#SETFFBA
OEA=0;ZRA=_ZTA+30;ZCA=1;PmodeA=1;'StCylA=1
IF _XQ3<0;OutLmtA=0;XQ#CHKLMTA,3;ENDIF;EN
EN

#SETPFBA
ZCA=0;PmodeA=0;'OEA=3;EN

#SETPST
IF  StCylA=3
    PState=1
ENDIF
IF StCylA=2
    PState=4
ENDIF
IF StCylA=1
    PState=3
ENDIF    
EN;EN

#SETZR
SPcntsA=(PSetPt*CntpPsiA)+PzerCntA
IF SPcntsA>65400;SPcntsA=65400;ENDIF
IF SPcntsA<150;SPcntsA=150;ENDIF
IF PState=1
  ZR SPcntsA
ENDIF
EN

#STARTA
FState=1;XdcrCur=1;ReqStp=0;ReStpP=0
JS#AACTIV
JS#VCALCSA
JG PmpSpdA;BGA
IF LowFlow=1;JS#LOSPPA;XQ#ADJSPA,5;ENDIF
JP#CHKMLA
EN

#STPBOTH
ReqStp=1
IF FState=1;STA;ENDIF
AM;ZCA=0;IF _XQ5>0;HX5;ENDIF
StReflA=0;PState=0;StCylA=0
FState=0;HX2
EN

#STRTDAQ
WT 5
DAQmode=1
XQ#PDAQ,7
JP#DAQLOOP;EN

#STRTMPL
Pmode=1;PState=7;XQ#MASTPLP,4
EN

#STRTFLO
XQ#STARTA,2
EN

#STRTPOS
IF PmpMode=1;StartMLA=PmpStart;ENDIF
IF PmpMode=0;StartMLA=RcvStart;ENDIF
IF Burn>0;Burn=0;BV;ENDIF
EN

#STRTPRS
Pready=0
IF (StReflA=1);JP#STRTPRS;ENDIF
jststrd=1;ReflA=0;ReqStp=0;ReStpP=0
RevSpdA=(ReflPc*CntsPMLA)/60
IF RevSpdA>JgSpdMx;RevSpdA=JgSpdMx;ENDIF
IF RevSpdA<JgSpdMn;RevSpdA=JgSpdMn;ENDIF
REM A is outside limits
IF (MLcurA>(Amax))|(MLcurA<(Amin))
    StReflA=1;CONTA=1
    XQ#REFILLA,2;StCylA=1
ENDIF
PSetPt=PcurA+5
JS#STRTMPL
JP#PCNTRLA
EN

#STPCYCL
STA;Cycle=0;JS#ClsAll;HX1;HX2;HX4;HX6
EN

#STPDAQ
DAQmode=0
EN

#STPDP
ReStpP=1
EN

#SETSCAL
JS#MLSCALA
EN

#SYNCA
JP#SYNCA,StReflA>0
StCylA=2;CompErr=0
JS#ClsAout;JS#ClsAin;JS#SETFFBA;JS#SETPST
MLlimA=MLcurA-ErrVol
SPtmpA=_ZTA;DelSPA=SPcntsA-SPtmpA;RampA=0
IF DelSPA>500
  IncSPA=100
  RampA=1
ENDIF
IF DelSPA<500
  IncSPA=-100
  RampA=1
ENDIF
#RMPA
SPtmpA=SPtmpA+IncSPA
IF IncSPA>0
  IF SPtmpA>SPcntsA
      SPtmpA=SPcntsA
      RampA=0
  ENDIF
ELSE
  IF SPtmpA<SPcntsA
      SPtmpA=SPcntsA
      RampA=0
  ENDIF
ENDIF
REM Cylinder is out of limits-chng to Pos FB
IF (MLcurA<0)|(MLcurA>VolA)
  ZCA=0;CompErr=1
  IF MLcurA<0;ErrMsg=1;ENDIF
  IF MLcurA>VolA;ErrMsg=2;ENDIF
  NewErr=1
  RampA=0
ENDIF
REM Comp > 25%cyl
IF MLcurA<MLlimA;ZCA=0;ErrMsg=8;NewErr=1;CompErr=1;RampA=0;ENDIF;
ZR SPtmpA
WT 5
JP#RMPA,RampA=1
REM at this point setpoint has been ramped up, but pressure may not match - wait
REM for pressure to match before exiting this routine
#ATPRESA
REM Cylinder is out of limits-chng to Pos FB
IF (MLcurA<0)|(MLcurA>VolA)
  IF _ZCA>0
    ZCA=0;CompErr=1
    IF MLcurA<0;ErrMsg=1;ENDIF
    IF MLcurA>VolA;ErrMsg=2;ENDIF
    NewErr=1;CompErr=1
  ENDIF
ENDIF
REM Comp > 25% cyl vol
IF MLcurA<MLlimA
REM Exit this loop if err in prev loop  
  IF CompErr=1;SPtmpA=_ZTA;ENDIF
  IF _ZCA>0;ZCA=0;ErrMsg=8;NewErr=1;CompErr=1;SPtmpA=_ZTA;ENDIF
ENDIF
JP#ATPRESA,(@ABS[SPtmpA-_ZTA]>500)
IF CompErr=1
  StCylA=0;HX3
ELSE
  StCylA=3
ENDIF
MLcurA=_TPA/CntsPMLA;MLzeroA=MLcurA;JS#OpnAout;XdcrCur=1
JS#SETPST
JP#CHKLMTA
EN;EN;EN

#TESTCAL
DM RodDia[10]
DM PRange[8];DM VppsiA[8];DM VppsiB[8]
RodDia[0]=6.35
RodDia[1]=9.525
RodDia[2]=11.1125
RodDia[3]=15.875
RodDia[4]=22.225
RodDia[5]=28.575
RodDia[6]=39.675
RodDia[7]=48.00
RodDia[8]=7.874
RodDia[9]=17.46
PRange[0]=20.0
PRange[1]=50.0
PRange[2]=125.0
PRange[3]=200.0
PRange[4]=500.0
PRange[5]=1000
PRange[6]=5000
PRange[7]=10000
EN

#VCALCSA
'TranStps=(Tdec/lpDlay)*1000
'DecVol=(-PmpRate/120)*Tdec
PmpSpdA=(PmpRate*CntsPMLA)/60
IF @ABS[PmpSpdA]<2000;LowFlow=1;ELSE;LowFlow=0;IF _XQ5>0;HX5;ENDIF;ENDIF
TrnsVol= StartMLA-VolpCyl+DecVol
IF TrnsVol <(DecVol+0.5);TrnsVol=DecVol+0.5;ENDIF
IF TrnsVol>(StartMLA+1.00);TrnsVol=(StartMLA+1.00);ENDIF
RevSpdA=-PmpSpdA*(VolpCyl/(.75*(VolpCyl-(2*DecVol))))
IF RevSpdA>JgSpdMx;RevSpdA=JgSpdMx;ENDIF
IF RevSpdA<JgSpdMn;RevSpdA=JgSpdMn;ENDIF;EN

#VRECALA
JS#CALCNTA
BV
EN

#VSCALE
CntpPsiA=(65535/PRange[Pxdcr])*(PfsVA/A2DFS)
VppsiA[Pxdcr]=PfsVA/PRange[Pxdcr]
BV
EN

#ZEROML
JS#CURMLA,DAQmode=0
MLofstA=MLDispA;MLtotA=0
BV
EN

#ZEROVA
SumA=0;IncA2=0;AQ1;WT 1000
#READA
SumA=SumA+@AN[1];IncA2=IncA2+1;JP#READA,IncA2<AveNo
ZerTmpA=(SumA/IncA2)*(65532/PfsVA)
SumA=0;IncA2=0;AQ1,4;WT 1000
#READA2
SumA=SumA+_ZTA;IncA2=IncA2+1;JP#READA2,IncA2<AveNo
PzerCntA=SumA/IncA2;IF ZerTmpA<PzerCntA;PzerCntA=ZerTmpA;ENDIF
BV
EN;EN;EN

#ZEROBTH
JS#ZEROVA
EN

#ZEROOF
OF0
EN

#OpnAout
SB 2;Aflow=1
EN

#ClsAout
CB 2;Aflow=0
EN

#OpnAin
SB 1
EN

#ClsAin
CB 1
EN

#OpnBout
SB 4;Bflow=1
EN

#ClsBout
CB 4;Bflow=0
EN

#OpnBin
SB 3
EN

#ClsBin
CB 3
EN

#OpnAll
JS#OpnAout;JS#OpnAin;JS#OpnBout;JS#OpnBin;EN

#ClsAll
JS#ClsAout;JS#ClsAin;JS#ClsBout;JS#ClsBin;EN

#OpnOut
JS#OpnAout;JS#OpnBout;EN

#OpnIn
JS#OpnAin;JS#OpnBin;EN

#AACTIV
JS#ClsBout;JS#ClsBin;JS#ClsAin;JS#OpnAout;EN

#BACTIV
JS#ClsAout;JS#ClsAin;JS#ClsBin;JS#OpnBout;EN

#ClsIn
JS#ClsAin;JS#ClsBin;EN

#ClsOut
JS#ClsAout;JS#ClsBout;EN

REM ********* CUSTOM CONFIGURATION FILES - INSERT BELOW